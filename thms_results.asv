%%%%%%%%%%%%%%%%%%%%%%%%
%%% Results for THMS %%%
%%%%%%%%%%%%%%%%%%%%%%%%

clear;
clc;

%% Intialization Parameters
N = 9; % No. of subjects
D = 55; % No. of descriptors
num_iter = 1e3; % No. of iterations
num_bins = 100; % No. of bins for agreement values

use_custom_dist = 0; % 0 - False, 1 - True
distribution = [0.93, 0.07];

N_list = 3:12;
D_list = 5:10:100;

if(use_custom_dist == 0)
    write_fname = 'thms_pdf_data.mat';
else
    write_fname = 'thms_pdf_cdist_data.mat';
end

%% Varying number of subjects
[x_list, y_list] = get_pdf_loop_subjects(N_list, D, num_iter, num_bins, 'use_dist', use_custom_dist);
figure;
hold on;
g_colors_list = linspace(0.2, 1, numel(x_list));
legend_list = {};
for idx = 1:numel(x_list)
    plot(x_list{idx}, y_list{idx}, 'LineWidth', 2, 'Color', [g_colors_list(idx), 0.5, 0.4]);
    legend_list{end+1} = num2str(N_list(idx));
end
grid on;
xlabel('Agreement Rate', 'FontSize', 12)
ylabel('Normalized Frequency', 'FontSize', 12)
title('PDF - Varying no. of subjects', 'FontSize', 14)
legend(legend_list)
hold off;
% Saving the files
x_list_vsub = x_list;
y_list_vsub = y_list;
if(exist(write_fname, 'file'))
    save(write_fname, 'x_list_vsub', 'y_list_vsub', '-append')
else
   save(write_fname, 'x_list_vsub', 'y_list_vsub')
end

%% Varying number of descriptors
[x_list, y_list] = get_pdf_loop_descriptors(N, D_list, num_iter, num_bins, 'use_dist', use_custom_dist);
figure;
hold on;
g_colors_list = linspace(0.2, 1, numel(x_list));
legend_list = {};
for idx = 1:numel(x_list)
    plot(x_list{idx}, y_list{idx}, 'LineWidth', 2, 'Color', [g_colors_list(idx), 0.5, 0.4]);
    legend_list{end+1} = num2str(D_list(idx));
end
grid on;
xlabel('Agreement Rate', 'FontSize', 12)
ylabel('Normalized Frequency', 'FontSize', 12)
title('PDF - Varying no. of descriptors', 'FontSize', 14)
legend(legend_list)
hold off;
% Saving the files
x_list_vdesc = x_list;
y_list_vdesc = y_list;
if(exist(write_fname, 'file'))
   save(write_fname, 'x_list_vdesc', 'y_list_vdesc', '-append')
else
   save(write, 'x_list_vdesc', 'y_list_vdesc')
end

function [x_list, y_list] = get_pdf_loop_subjects(N_list, D, varargin)
    parser = inputParser;
    addOptional(parser, 'num_iter', 1e4);
    addOptional(parser, 'num_bins', 1e2);
    addOptional(parser, 'disp_flag', 1);
    addOptional(parser, 'use_dist', 0);
    parse(parser, varargin{:})
    num_iter = parser.Results.num_iter;
    num_bins = parser.Results.num_bins;
    disp_flag = parser.Results.disp_flag;
    use_dist = parser.Results.use_dist;
    
    x_list = {};
    y_list = {};
    if(disp_flag) progressbar, end
    for idx = 1 : numel(N_list)
        N = N_list(idx);
        [t, freqs] = get_pdf(N, D, 'num_iter', num_iter, 'num_bins', num_bins, 'disp_flag', 0, 'use_dist', use_dist);
        x_list{end+1} = t;
        y_list{end+1} = freqs;
        if(disp_flag) progressbar(idx/numel(N_list)), end;
    end
end

function [x_list, y_list] = get_pdf_loop_descriptors(N, D_list, varargin)
    parser = inputParser;
    addOptional(parser, 'num_iter', 1e4);
    addOptional(parser, 'num_bins', 1e2);
    addOptional(parser, 'disp_flag', 1);
    addOptional(parser, 'use_dist', 0);
    parse(parser, varargin{:})
    num_iter = parser.Results.num_iter;
    num_bins = parser.Results.num_bins;
    disp_flag = parser.Results.disp_flag;
    use_dist = parser.Results.use_dist;

    x_list = {};
    y_list = {};
    if(disp_flag) progressbar, end;
    for idx = 1 : numel(D_list)
        D = D_list(idx);
        [t, freqs] = get_pdf(N, D, 'num_iter', num_iter, 'num_bins', num_bins, 'disp_flag', 0, 'use_dist', use_dist);
        x_list{end+1} = t;
        y_list{end+1} = freqs;
        if(disp_flag) progressbar(idx/numel(D_list)), end;
    end
end

function [t, freqs] = get_pdf(N, D, varargin)
    parser = inputParser;
    addOptional(parser, 'num_iter', 1e4);
    addOptional(parser, 'num_bins', 1e2);
    addOptional(parser, 'disp_flag', 0);
    addOptional(parser, 'use_dist', 0);
    parse(parser, varargin{:})
    num_iter = parser.Results.num_iter;
    num_bins = parser.Results.num_bins;
    disp_flag = parser.Results.disp_flag;
    use_dist = parser.Results.use_dist;
    
    freqs = zeros(1, num_bins);
    if(disp_flag) progressbar, end
    for xx = 1:num_iter
       if(use_dist == 0)
           M = randi([0, 1], N, D);
       else
           M = gendist(distribution, N, D) - 1;
       end
       loa = loa_semantics(M, 'jaccard');
       freq_idx = ceil(num_bins * loa);
       if(freq_idx == 0) 
           freq_idx = 1;
       end
       freqs(freq_idx) = freqs(freq_idx) + 1;
       if(disp_flag) progressbar(xx/num_iter), end;
    end
    freqs = freqs / num_iter;
    rem_ids = (freqs~=0);
    freqs = freqs(rem_ids);
    t = linspace(0, 1, num_bins);
    t = t(rem_ids);
end